Adapter is a structural design pattern, which allows incompatible objects to collaborate.

1. Legacy code integration: If you have legacy code that uses an older interface and you want to integrate it with newer code that uses a different interface, the Adapter pattern can provide a way to make the two interfaces work together.

2. Third-party library integration: If you are using a third-party library that has an incompatible interface with your code, the Adapter pattern can provide a way to integrate the library with your code without having to modify the library code.

3. Interface abstraction: If you want to create an abstraction layer between two interfaces to decouple them, the Adapter pattern can provide a way to create an adapter class that acts as a bridge between them.

4. Interface translation: If you have two interfaces that are similar but not identical, the Adapter pattern can provide a way to create an adapter class that translates between the two interfaces.

- Use the Adapter class when you want to use some existing class, but its interface isn’t compatible with the rest of your code.
- Use the pattern when you want to reuse several existing subclasses that lack some common functionality that can’t be added to the superclass.

Conceptual Example
We have a client code that expects some features of an object (Lightning port), but we have another object called adaptee (Windows laptop) which offers the same functionality but through a different interface (USB port)

This is where the Adapter pattern comes into the picture. We create a struct type known as adapter that will:

Adhere to the same interface which the client expects (Lightning port).

Translate the request from the client to the adaptee in the form that the adaptee expects. The adapter accepts a Lightning connector and then translates its signals into a USB format and passes them to the USB port in windows laptop.